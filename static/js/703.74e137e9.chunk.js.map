{"version":3,"file":"static/js/703.74e137e9.chunk.js","mappings":"kNACA,EAA6B,2BAA7B,EAAqE,2B,0BC+CrE,MA1CA,WAAmB,IAAD,EAChB,GAAwCA,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAASC,EAAAA,EAAAA,UACb,kBAAMC,OAAOC,aAAP,OAAuBL,GAA7B,GACA,CAACA,IAGH,GAAyBM,EAAAA,EAAAA,UAAQ,UAACJ,EAAOK,aAAR,QAAiB,IAAlD,eAAMA,EAAN,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAMG,EAAN,KAAaC,EAAb,KAiBA,OAdAC,EAAAA,EAAAA,YAAU,WACRC,MAAM,sIAAD,OAAuIL,IACzIM,MAAK,SAAAC,GAAE,OAAIA,EAAGC,MAAP,IAAeF,MAAK,SAAAC,GAC1BJ,EAAUI,EAAGE,SACbf,EAAgBM,EAAM,CAACA,MAAMA,GAAO,CAAC,EACxC,GAEF,GAAC,CAACA,KAQD,iCACE,4IACE,kBAAOU,SAPU,SAACC,GACtBV,EAASU,EAAEC,OAAOC,MACnB,EAKsCC,KAAK,OAAOD,MAAOb,KACtD,gBAAKe,UAAWC,EAAhB,SACGd,EAAOA,EAAOe,KAAI,SAAAV,GAAE,OAAM,SAAC,KAAD,CAAqBW,GAAE,UAAKX,EAAGY,IAA/B,UACzB,iBAAKJ,UAAWC,EAAhB,WACE,gBAAKI,MAAO,IAAKC,IAAG,0CAAqCd,EAAGe,aAAeC,IAAKhB,EAAGiB,OAASjB,EAAGkB,QAC/F,wBAAKlB,EAAGkB,MAAMlB,EAAGiB,aAHiBE,EAAAA,EAAAA,MAAjB,IAMlB,OAIV,C,uDC7CM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACZ,EAAIa,GAWvD,OAREb,IAFFa,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Movies/Movies.module.css?9f30","components/Movies/Movies.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"Movies_moviesList__Un-WS\",\"moviesItem\":\"Movies_moviesItem__BPaMl\"};","import { useEffect, useMemo, useState } from 'react';\nimport css from './Movies.module.css'\nimport { nanoid } from 'nanoid';\nimport { Link, useSearchParams } from 'react-router-dom';\n\n\nfunction Movies (){\n  const [searchParams, setSearchParams] = useSearchParams();\n  const params = useMemo(\n    () => Object.fromEntries([...searchParams]),\n    [searchParams]\n  );\n\n  const[query, setQuery] = useState(params.query ?? '');\n  const[movies,setMovies] = useState([]);\n\n\n  useEffect(()=>{\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=9095dc0682bb2e62c57b5cbea7d9ca43&language=en-US&page=1&include_adult=false&query=${query}`)\n      .then(el => el.json()).then(el => {\n        setMovies(el.results)\n        setSearchParams(query?{query:query}:{})\n    })\n    // eslint-disable-next-line\n  },[query])\n\n\n  const handleOnChange = (e)=>{\n    setQuery(e.target.value)\n  }\n\n  return(\n    <>\n      <h2>Введіть назву фільму</h2>\n        <input onChange={handleOnChange} type=\"text\" value={query}/>\n      <div className={css.moviesList}>\n        {movies?movies.map(el => ( <Link key={nanoid()} to={`${el.id}`} >\n          <div className={css.moviesItem} >\n            <img width={400} src={`https://image.tmdb.org/t/p/w500/${el.poster_path}`} alt={el.title || el.name}/>\n            <h2>{el.name||el.title}</h2>\n          </div>\n          </Link>\n        )):\"\"}\n      </div>\n    </>\n  )\n}\n\nexport default Movies;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useSearchParams","searchParams","setSearchParams","params","useMemo","Object","fromEntries","useState","query","setQuery","movies","setMovies","useEffect","fetch","then","el","json","results","onChange","e","target","value","type","className","css","map","to","id","width","src","poster_path","alt","title","name","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}